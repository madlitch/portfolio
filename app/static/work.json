[
  {
    "title": "Full Stack SWE",
    "tags": ["current", "professional"],
    "subtitle": "Spectra BM",
    "year": "2024 - Current",
    "url": "https://www.spectra.bm/",
    "keywords": "React, Next.js, Ant Design, Jest, PostgreSQL, Prisma ORM, Microsoft Azure",
    "bulletpoints": [
      "Developed and optimized backend services in Next.js with Prisma ORM and PostgreSQL, ensuring efficient data handling and scalability",
      "Architected and implemented a dynamic, data-driven form generation system, integrating complex validation logic, business rules, and version control",
      "Designed and implemented robust API endpoints, improving data integrity and system performance",
      "Refactored and streamlined database queries to enhance efficiency and maintainability, reducing query execution times",
      "Led the transition to Ant Design, standardizing the frontend while maintaining a focus on performance and usability"
    ]
  },
  {
    "title": "Smart Medicine Cabinet",
    "tags": ["highlight", "school"],
    "subtitle": "Capstone Systems Design",
    "year": "2023 - 2024",
    "url": "https://github.com/madlitch/magicmirror",
    "keywords": "Raspberry Pi, IoT, FDM Printing, OnShape, MagicMirror, OpenCV, Node.js, Express, Sequelize, SQLite, MySQL, AWS RDS, AWS S3, Electron",
    "bulletpoints": [
      "1st Place, Engineering Capstone Competition, Ontario Tech University",
      "Engineered and orchestrated the design and assembly of a smart medicine cabinet to enhance medication management for patients with dementia",
      "Designed and 3D printed medication dispensers with solenoid actuation, addressing mechanical challenges to reliably dispense medication",
      "Implemented computer vision algorithms using Python and OpenCV for medication intake verification, ensuring accurate tracking of patient consumption",
      "Developed the backend server architecture using Node.js and Express, focusing on robustness and API service efficiency",
      "Integrated Sequelize ORM for database operations, facilitating secure and efficient data management",
      "Oversaw the design, assembly, and wiring of the cabinet, optimizing for space and functionality while maintaining aesthetic appeal"
    ]
  },
  {
    "title": "Cloud ACC Simulation",
    "tags": ["school"],
    "subtitle": "Cloud Computing",
    "year": "2024",
    "url": "https://github.com/madlitch/acc_cloud_simulation",
    "keywords": "Google Cloud Platform, Dataflow, Apache Beam, BigQuery, Numpy, Pandas",
    "bulletpoints": [
      "Developed an end-to-end pipeline for simulating Adaptive Cruise Control (ACC) using the LXD HighD dataset, leveraging Google Cloud Storage (GCS), Google Dataflow, and Google Compute Engine (GCE) for data processing and simulation execution",
      "Implemented data processing and filtering mechanisms with Google Dataflow to identify challenging scenarios for ACC simulation, storing processed data in BigQuery for further analysis",
      "Designed and deployed a Pub/Sub messaging system to asynchronously trigger ACC behavior simulations on GCE instances, based on real-world driving scenarios",
      "Executed ACC simulations on GCE, incorporating custom Python scripts to evaluate ACC performance against challenging scenarios, with simulation outcomes persisted in BigQuery",
      "Visualized and analyzed ACC simulation outcomes using Looker Studio, providing insights into collision avoidance effectiveness and ACC system performance under various driving conditions"
    ]
  },
  {
    "title": "Secure Purchase Order",
    "tags": ["school"],
    "subtitle": "Software & Computer Security",
    "year": "2024",
    "url": "https://github.com/madlitch/secure_purchase_order",
    "keywords": "FastAPI, PostgreSQL, Bootstrap, Docker, OpenPGP, SQLAlchemy",
    "bulletpoints": [
      "Secure purchase order management application with FastAPI, PostgreSQL, Bootstrap, and Docker",
      "Secure communication via encrypted and digitally signed emails compatible with OpenPGP-enabled clients",
      "Streamlined user registration and key management, auto-generating PGP keys and securely encrypting private keys with user-specific secrets",
      "Implemented a dual-signature protocol, leveraging user and server PGP keys for authentic and non-repudiable purchase orders",
      "Utilized PGPy for cryptographic security, ensuring end-to-end encryption and digital signatures across all data transactions.",
      "Automated transaction timestamping, embedding verifiable timestamps in purchase orders to secure transaction integrity"
    ]
  },
  {
    "title": "StringShare",
    "tags": ["highlight", "school"],
    "subtitle": "Distributed Systems",
    "year": "2023",
    "url": "https://github.com/madlitch/stringshare",
    "keywords": "FastAPI, PostgreSQL, Docker, SQLAlchemy, React Native",
    "bulletpoints": [
      "A decentralized social networking platform, inspired by Mastodon, utilizing FastAPI, PostgreSQL, and Docker",
      "Designed and implemented a publish-subscribe server-to-server communication protocol, enabling real-time data propagation and synchronization across decentralized server instances",
      "Scalable backend infrastructure leveraging Docker and Docker Compose for containerization and orchestration",
      "Single Version of Truth data consistency model, achieving immutable data across the network for clear data lineage",
      "RESTful API endpoints for a React Native application"
    ]
  },
  {
    "title": "Distributed Jeopardy",
    "tags": ["school"],
    "subtitle": "Distributed Systems",
    "year": "2023",
    "url": "https://github.com/madlitch/distributed_jeopardy",
    "keywords": "Java, Concurrency, Socket Programming, Multithreading, Server-Client Architecture, CyclicBarrier",
    "bulletpoints": [
      "Implemented a multi-threaded Jeopardy game server in Java using socket programming",
      "Leveraged Java concurrency tools like CyclicBarrier and synchronized methods for seamless game state management across player interactions",
      "Developed a custom communication protocol between client and server to support robust and scalable game interactions",
      "Created a dynamic content management system for storing and accessing game questions, answers, and scores",
      "Utilized player response times to ensure fair play and determine turn order, enhancing the competitiveness of the game",
      "Incorporated comprehensive error handling and connection management to maintain game integrity during disruptions"
    ]
  },
  {
    "title": "CalorieCalculator",
    "tags": ["school"],
    "subtitle": "Mobile Application Development",
    "year": "2023",
    "url": "https://github.com/madlitch/CalorieCalculator",
    "keywords": "Flutter, Dart, SQLite",
    "bulletpoints": [
      "Designed and implemented a Nutrition Tracker mobile app using Flutter and Dart, emphasizing usability and performance",
      "Developed a local SQLite database integration for persistent storage of food items and nutritional information, enhancing app functionality",
      "Crafted custom UI components for food listing and nutrition details, providing a seamless and intuitive user experience",
      "Implemented complex business logic for tracking daily food intake, calculating nutritional values, and generating user insights",
      "Utilized state management practices to ensure a responsive and dynamic user interface across the application",
      "Incorporated best practices in code organization and architecture, facilitating easy maintenance and future app scalability"
    ]
  },
  {
    "title": "Genesis Financials",
    "tags": ["school"],
    "subtitle": "Data Management Systems",
    "year": "2022",
    "url": "https://github.com/DaanyaalTahir/genesis-financials",
    "keywords": "React.js, Node.js",
    "bulletpoints": [
      "Online Banking System with fully functional insights, money transfers, statements, and loans, written with React.js and Node.js",
      "Created Entity Relationship and Schema diagrams for the database system",
      "Assisted with the creation of information views for the insights page",
      "Generated and filled database with mock data",
      "Designed and implemented the loans system"
    ]
  },
  {
    "title": "MadPixelSort",
    "tags": ["current", "highlight", "startup"],
    "subtitle": "Commercial Application",
    "year": "2021 - Current",
    "url": "https://madpixel.software/madpixelsort",
    "keywords": "Rust, JavaScript, HTML, CSS, Electron, FFMpeg, Neon Bindings, Bootstrap, JQuery",
    "bulletpoints": [
      "Cross-platform desktop app for producing pixel sorting effects using Electron and Neon Bindings",
      "Single-handedly conceptualized, built, and brought to market with commercial success",
      "Implemented a multi-threaded Rust algorithm that can sort 24 million pixels in under 500 ms",
      "Designed an intuitive & responsive UI from scratch in HTML, CSS, JavaScript, and JQuery",
      "Keyframing/effect animation system to allow smooth transitions in animations and video",
      "Implemented a custom cryptographic DRM/activation system, tying a license key activation to a user on a per machine basis"
    ]
  },
  {
    "title": "MadPixel Software",
    "tags": ["current", "startup"],
    "subtitle": "Website &  API",
    "year": "2022 - Current",
    "url": "https://madpixel.software",
    "keywords": "Fastapi, Jinja, Bootstrap, JQuery, Sass, PostgreSQL",
    "bulletpoints": [
      "Official website for MadPixel Software Inc.",
      "Website built from scratch with Bootstrap, JQuery, and Sass, with custom CSS text glitch effects",
      "Python (FastAPI) Async REST backend server for website hosting, app licensing, and payment processing",
      "PostgreSQL database using SQLAlchemy ORM mapping for customer and licensing information",
      "Webserver and database hosted within respective Docker containers using Docker Compose",
      "Stripe integration for payment processing with Stripe Checkout"
    ]
  },
  {
    "title": "Planit",
    "tags": ["startup"],
    "subtitle": "Commercial Application",
    "year": "2019 - 2022",
    "url": "",
    "keywords": "iOS, Android, Framer, Flutter, Dart, Fastapi, PostgreSQL, PostGIS, Google Places",
    "bulletpoints": [
      "iOS & Android social media mobile app written in Flutter",
      "Designed, prototyped, and iterated a frontend UI in Framer",
      "Designed and implemented a production ready database schema including user relations (friends/groups), user interests, location history, messaging, events, venues, and more",
      "Implemented an algorithm finding the median coordinate from a list of user coordinates, then querying Google Places for relevant venues around the median based on user interests",
      "Wrote an async REST API with user, friend, event, and geolocation management, with OAuth2 authentication and credential hashing/salting"
    ]
  },
  {
    "title": "Social Calendar",
    "tags": ["school"],
    "subtitle": "Software Design & Architecture",
    "year": "2021",
    "url": "https://github.com/madlitch/SOFE3650-Social-Calendar",
    "keywords": "Flask, Jinja, ADD, Electron, PostgreSQL",
    "bulletpoints": [
      "Desktop social calendar system that allowed for users to share events with their friends",
      "Developed and designed using ADD (Attribute Driven Design) iterations, starting from original use cases, quality attributes, constraints, and concerns",
      "Showcases the full ADD process with a comprehensive timeline of architectural design decisions and iterations"
    ]
  },
  {
    "title": "OnTech Movies",
    "tags": ["school"],
    "subtitle": "Web Programming",
    "year": "2020",
    "url": "https://github.com/madlitch/ONTech-Movies",
    "keywords": "Flask, Jinja, PostgreSQL",
    "bulletpoints": [
      "Full-stack movie booking system with a Flask backend and Web (Rendered with Jinja) frontend",
      "Fully featured account and invoicing system",
      "Can book seats using a visualization of available seats and times"
    ]
  },
  {
    "title": "Galton Board Simulation",
    "tags": ["school"],
    "subtitle": "Data Structures",
    "year": "2020",
    "url": "https://github.com/madlitch/galtonboard",
    "keywords": "Java, Swing",
    "bulletpoints": [
      "Simulated Galton Board for showcasing a normal distribution when n balls are dropped into m bins through a tree-like pattern of pegs",
      "Designed and implemented a recursive algorithm that simulates the path of a ball by traversing a graph representing the network of pegs, stored in a linear array",
      "Algorithm resulted in a worst-case time complexity of O(n)"
    ]
  }
]
